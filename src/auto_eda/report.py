from __future__ import annotations
import os
from typing import Optional, Dict, Any
import pandas as pd
from . import summary as S
from . import visuals as V
from .io_utils import memory_human_readable
from plotly.offline import plot as plot_offline
from string import Template

HTML_TEMPLATE = Template("""<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>auto-eda report</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif; margin: 24px; }
    h1, h2, h3 { margin-top: 1.2em; }
    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 16px; }
    .card { border: 1px solid #eee; border-radius: 12px; padding: 16px; box-shadow: 0 2px 6px rgba(0,0,0,0.05); }
    table { border-collapse: collapse; width: 100%; }
    th, td { padding: 8px; border-bottom: 1px solid #f0f0f0; text-align: left; }
    .muted { color: #555; }
    .chip { display: inline-block; padding: 2px 8px; border-radius: 999px; border: 1px solid #ddd; margin-right: 8px; font-size: 12px;}
    .footer { margin-top: 40px; color: #777; font-size: 12px;}
    .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
    .section { margin-bottom: 24px; }
  </style>
</head>
<body>
  <h1>auto-eda report</h1>
  <p class="muted">Generated by <span class="mono">auto-eda</span></p>

  <div class="section card">
    <h2>Overview</h2>
    <div class="grid">
      <div><div class="chip">Rows</div><div class="mono">$rows</div></div>
      <div><div class="chip">Columns</div><div class="mono">$cols</div></div>
      <div><div class="chip">Memory</div><div class="mono">$memory</div></div>
      <div><div class="chip">Overall Missing</div><div class="mono">$overall_missing%</div></div>
    </div>
    <h3>Schema (dtypes)</h3>
    $schema_table
  </div>

  <div class="section card"><h2>Missingness by Column</h2>$missing_table</div>
  <div class="section card"><h2>Numeric Summary</h2>$numeric_table</div>
  <div class="section card"><h2>Categorical Summary (Top Values)</h2>$categorical_html</div>
  <div class="section card"><h2>Correlations</h2>$corr_heatmap</div>
  <div class="section card"><h2>Distributions</h2>$histograms</div>
  <div class="section card"><h2>Boxplots</h2>$boxplots</div>
  <div class="section card"><h2>Pairwise Scatter (sampled)</h2>$pairwise_scatter</div>
  <div class="section card"><h2>Target Relationships</h2>$target_section</div>

  <div class="footer"><p>Made with ❤️ by auto-eda.</p></div>
</body>
</html>""")

def _table_html(df: pd.DataFrame) -> str:
    if df is None or df.empty:
        return "<p class='muted'>No data available.</p>"
    return df.to_html(classes="mono", border=0)

def _dict_table_html(d: Dict[str, Any], columns=("Column", "Value")) -> str:
    if not d:
        return "<p class='muted'>No data available.</p>"
    rows = "".join(f"<tr><td class='mono'>{k}</td><td class='mono'>{v}</td></tr>" for k, v in d.items())
    return f"<table><thead><tr><th>{columns[0]}</th><th>{columns[1]}</th></tr></thead><tbody>{rows}</tbody></table>"

def _cat_summary_html(cat_stats: Dict[str, Any]) -> str:
    if not cat_stats:
        return "<p class='muted'>No categorical columns.</p>"
    blocks = []
    for col, info in cat_stats.items():
        top_vals = "".join(f"<tr><td class='mono'>{k}</td><td class='mono'>{v}</td></tr>" for k, v in info['top_values'].items())
        blocks.append(f"""
        <div class="card" style="margin-bottom:12px;">
          <h3>{col} <span class="chip">unique: {info['unique']}</span></h3>
          <table><thead><tr><th>Value</th><th>Count</th></tr></thead><tbody>{top_vals}</tbody></table>
        </div>
        """)
    return "".join(blocks)

def _fig_div(fig) -> str:
    if fig is None:
        return "<p class='muted'>No figure.</p>"
    return plot_offline(fig, include_plotlyjs='cdn', output_type='div')

def build_report(df: pd.DataFrame, output_dir: str = "report", target: Optional[str] = None, pair_cols: int = 4, pair_sample: float = 0.5) -> str:
    os.makedirs(output_dir, exist_ok=True)
    info = S.overview(df)
    num_stats = S.numeric_stats(df)
    cat_stats = S.categorical_stats(df)
    corr = S.correlations(df)

    schema_table = _dict_table_html(info["dtypes"], columns=("Column", "dtype"))
    missing_table = _dict_table_html(info["missing_by_col"], columns=("Column", "Missing Count"))
    numeric_table = _table_html(num_stats)
    categorical_html = _cat_summary_html(cat_stats)
    corr_heatmap = _fig_div(V.correlation_heatmap(corr)) if not corr.empty else "<p class='muted'>Not enough numeric columns for correlations.</p>"

    hist_divs, box_divs = [], []
    for col in df.select_dtypes(include=["number"]).columns[:40]:
        hist_divs.append(_fig_div(V.histogram(df, col)))
        box_divs.append(_fig_div(V.boxplot(df, col)))
    histograms = "".join(hist_divs) if hist_divs else "<p class='muted'>No numeric columns.</p>"
    boxplots = "".join(box_divs) if box_divs else "<p class='muted'>No numeric columns.</p>"

    num_cols = df.select_dtypes(include=["number"]).var().sort_values(ascending=False).index.tolist()[:pair_cols]
    pairwise_scatter = _fig_div(V.scatter_pair(df, num_cols, sample=pair_sample)) if len(num_cols) >= 2 else "<p class='muted'>Not enough numeric columns.</p>"

    target_info = S.target_relationships(df, target)
    if not target_info:
        target_section = "<p class='muted'>No target provided or target not found.</p>"
    else:
        if "numeric_target_correlations" in target_info:
            target_section = _dict_table_html(target_info["numeric_target_correlations"], columns=("Feature", "Pearson corr"))
        else:
            nested = target_info["categorical_target_group_means"]
            rows = ""
            for feature, mapping in nested.items():
                for cls, val in mapping.items():
                    try:
                        val_str = f"{val:.4f}"
                    except Exception:
                        val_str = str(val)
                    rows += f"<tr><td class='mono'>{feature}</td><td class='mono'>{cls}</td><td class='mono'>{val_str}</td></tr>"
            target_section = "<table><thead><tr><th>Feature</th><th>Class</th><th>Mean</th></tr></thead><tbody>" + rows + "</tbody></table>"

    html = HTML_TEMPLATE.substitute(
        rows=info["shape"]["rows"],
        cols=info["shape"]["cols"],
        memory=memory_human_readable(info["memory_bytes"]),
        overall_missing=f"{info['overall_missing_pct']:.2f}",
        schema_table=schema_table,
        missing_table=missing_table,
        numeric_table=numeric_table,
        categorical_html=categorical_html,
        corr_heatmap=corr_heatmap,
        histograms=histograms,
        boxplots=boxplots,
        pairwise_scatter=pairwise_scatter,
        target_section=target_section
    )

    out_path = os.path.join(output_dir, "index.html")
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(html)
    return out_path
